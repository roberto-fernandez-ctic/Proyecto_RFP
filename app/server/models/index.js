/* Autogenerated page using Sequelize-cli, helps with Database develpment */
'use strict';

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const process = require('process');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config')[env];
const db = {};
const CONFIG = require("../config/config");

/* let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}
 */

const sequelize = new Sequelize(
  CONFIG.DB_NAME,
  CONFIG.DB_USERNAME,
  CONFIG.DB_PASSWORD,
  {
    host: CONFIG.DB_HOST,
    port: CONFIG.DB_PORT,
    dialect: CONFIG.DB_DIALECT,
    operatorsAliases: null,
    logging: console.log,
  }
);

fs
  .readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

// Relaciones
db.User.hasMany(db.Booking, { foreignKey: 'id_user', as: 'bookings' });

db.Booking.belongsTo(db.Court, { foreignKey: 'id_court', as: 'court' });
db.Booking.belongsTo(db.User, { foreignKey: 'id_user', as: 'user' });
db.Booking.belongsTo(db.Schedule, { foreignKey: 'id_schedule', as: 'schedule' });

db.Court.hasMany(db.Booking, { foreignKey: 'id_court', as: 'bookings' });

db.Schedule.hasMany(db.Booking, { foreignKey: 'id_schedule', as: 'bookings' });

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;
